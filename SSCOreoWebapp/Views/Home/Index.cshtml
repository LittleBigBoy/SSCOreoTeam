@{
    ViewData["Title"] = "Dashboard";
}
<style>
    .pie-legend ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .pie-legend span {
        display: inline-block;
        width: 14px;
        height: 14px;
        border-radius: 100%;
        margin-right: 16px;
        margin-bottom: -2px;
    }

    .pie-legend li {
        margin-bottom: 10px;
        display: inline-block;
        margin-right: 10px;
    }

    canvas {
        width: 100% !important;
        height: auto !important;
    }

    .table {
        border: 1px solid red;
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    .cell {
        display: table-cell;
        vertical-align: middle;
    }

    
</style>
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Dashboard</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <a class="btn btn-sm btn-outline-secondary dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false" id="clientText">ClientA</a>
            <ul class="dropdown-menu" id="clientlist">
                <li><a class="dropdown-item" onclick='onClientClick("ClientA")'>ClientA</a></li>
                <li><a class="dropdown-item" onclick='onClientClick("ClientB")'>ClientB</a></li>
                <li><a class="dropdown-item" onclick='onClientClick("ClientC")'>ClientC</a></li>
            </ul>
        </div>
        <div>
            <a class="btn btn-sm btn-outline-secondary dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false" id="frequenceText" data-frequence="7">Each 7 days</a>
            <ul class="dropdown-menu" id="frequencelist">
                <li><a class="dropdown-item" onclick='onFrequenceClick(7,"Each 7 days")'>Each 7 days</a></li>
                <li><a class="dropdown-item" onclick='onFrequenceClick(30,"Each 30 days")'>Each 30 days</a></li>
                <li><a class="dropdown-item" onclick='onFrequenceClick("Future", "Future")'>Future</a></li>
            </ul>
        </div>
    </div>
</div>


<div class="container-fluid pb-3">
    <div class="d-grid gap-3" style="grid-template-columns: 1fr 1fr;" id="chartZone">
        <div class="bg-light border rounded-3" id="myPie">
            <canvas id="pieChart" style="max-height: 400px;"></canvas>
        </div>

    </div>
</div>





<script>
// Clients
    $.ajax
        ({
            url: "/api/Client",
            dataType: "json",
            type: "get",
            data: {
            },
            success: function (res) {
               console.log(res)
                $("#clientlist").empty();
                res.map(x => $("#clientlist").append('<li><a class="dropdown-item" onclick=\'onClientClick("'+ x +'")\'>'+ x +'</a></li>'));
            },
            error: function (ex) {
                alert('failed!');
            },
        });
    function onClientClick(client)
    {
        var clientText = $("#clientText").html();
        if (client !== clientText){
            $("#clientText").html(client);
            renderChart();
        }
    }
    function onFrequenceClick(frequence, text){
        var frequenceText = $("#frequenceText").data("frequence");
        if (frequence !== frequenceText){
            $("#frequenceText").html(text);
            $("#frequenceText").data("frequence", frequence);
            renderChart();
        }
    }
    function renderChart() {
        var client = $("#clientText").html();
        var frequence = $("#frequenceText").data("frequence");
        $.ajax
            ({
                url: '/api/Client/' + client + '/frequence/' + frequence + '/portfolios',
                dataType: "json",
                type: "get",
                data: {
                },
                success: function (res) {
                    var labels = res.map(x => x.portfolioName + "(" + x.percentage + ")");
                    var datas = res.map(x => x.portfolioData)
                    /// pie
                    $("#myPie").empty();
                    $("#myPie").append(' <canvas id="pieChart" style="max-height: 400px;"></canvas>')
                    const ctx = document.getElementById('pieChart');
                    new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: "",
                                data: datas,
                                borderWidth: 1,
                                backgroundColor: Samples.utils.defineColor,
                            }]
                        },
                        options: {
                            plugins: {
                                legend: {
                                    onHover: handleHover,
                                    onLeave: handleLeave,
                                    onClick: handleClick
                                }
                            }
                        }
                    });
                    /// line
                    $("#myPie").nextAll().remove();
                    res.map(x => $("#chartZone").append('<div class="bg-light border rounded-3"><canvas id = "' + x.portfolioName.replace(/\s/g, "") + '" ></canvas></div>'));

                    var dataRange = 7;
                    var dataContent = '';
                    res.forEach((e, i) => {
                        var data = {};
                        var dataSet = [];
                        var portfolioData = e.data;
                        var navItem = {};
                        navItem.label = 'NAV'
                        navItem.data = portfolioData.map(x => x.nav);
                        navItem.borderColor = Samples.utils.CHART_COLORS.red;
                        navItem.backgroundColor = Samples.utils.transparentize(Samples.utils.CHART_COLORS.red, 0.5);
                        navItem.yAxisID = 'y';
                        dataSet.push(navItem);
                        var returnItem = {};
                        returnItem.label = 'Return'
                        returnItem.data = portfolioData.map(x => x.return);
                        returnItem.borderColor = Samples.utils.CHART_COLORS.blue;
                        returnItem.backgroundColor = Samples.utils.transparentize(Samples.utils.CHART_COLORS.blue, 0.5);
                        returnItem.yAxisID = 'y1';
                        dataSet.push(returnItem);
                        data.datasets = dataSet;
                        data.labels = portfolioData.map(x => x.asOf);
                        createLineChart(e.portfolioName.replace(/\s/g, ""), data, e.portfolioName);
                    });
                },
                error: function (ex) {
                    alert('failed! exception: ' + ex);
                },
            });
    }

    
    function handleClick(evt, item, legend) {
        console.log(item)
    }
    function handleHover(evt, item, legend) {
        legend.chart.update();
    }
    function handleLeave(evt, item, legend) {
        legend.chart.update();
    }
    
    function createLineChart(elementId,data,title)
    {
        const ctxCom = document.getElementById(elementId);
        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: title
                    }
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',

                        // grid line settings
                        grid: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    },
                }
            },
        };
        new Chart(ctxCom, config);
    }
    renderChart();
</script>